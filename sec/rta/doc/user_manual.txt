User Manual                         {#userman}
===========

Introduction
------------
RTA (Runtime Assembler Library) is a standalone library for writting SEC
descriptors.

RTA gives users the ability to write descriptors in a human readable form
by using C code instead of low level machine code.
It also gives the advantage that it verifies the correctness of the
descriptors.
RTA has, over the other code translators, the advantage that it gives shorter
and more readable code.

As a standalone library, RTA will not interfere with other components of the
user application.


Installation
----------------
The library can be installed by running 'make' inside the root of the package.

    $ make install

The default install path "/usr/include" can be changed by editing the Makefile.
It is not necessary to install the library on the target machine unless you
intend to build your application there as well.


Using RTA
---------
RTA can be used in an application just by including two header files:

	#include flib/rta.h
	#include flib/desc.h

The file protoshared.h contains several real-world descriptors written with
RTA. You can use them as-is or adapt them to your needs.

RTA routines assume that your code defines a local variable named "program":

    struct program prg;
    struct program *program = &prg;

This variable is passed behind the scene to all RTA API calls. It contains
several housekeeping information that are used during descriptor creation.

RTA creates the descriptors and saves them in buffers. It is the user's job
to allocate memory for these buffers before passing them to RTA program
initialization call.

A RTA program should start with a call to PROGRAM_CNTXT_INIT and end with
PROGRAM_FINALIZE.

PROGRAM_CNTXT_INIT will initialze the members of 'program' structure with
user information (pointer to user's buffer, and the SEC subversion).
The FINALIZE call verifies the descriptor's validity.

The program length is limitted to the size of buffer descriptor which can be
maximum 64 words (32 bit). However, a JUMP command can cause loading and
execution of another Job Descriptor; this allows for much larger programs
to be created.


RTA components
--------------
The content of the package is split mainly in two components:
- descriptor builder API (rta.h, desc.h)
- ready to use RTA descriptors (protoshared.h)

From the point of view of the building blocks we can identify:
- buffer management: init & finalize
- sec commands: move, load, fifo-load etc.
- self referential code: for example routines that update JUMP destinations

In some cases, descriptor's fields can't be set on the spot. Such fields will be
set with correct values by PATCH calls just before PROGRAM_FINALIZE.
(This procedure can be seen as similar to what the linker does before executing
a binary file.)

If there is a need for descriptors larger than 64 bytes, their function can be
split into several smaller ones. In such a case the smaller descriptors are
corelated and updated using the PATCH (non-local) command.
However, these calls must appear after all the descriptors are finalized (not
before as in a single descriptor case).


Example applications
--------------------
The RTA package comes with a set of examples inside "tests" directory. These
examples can be compiled by issuing the 'make' command:

    $ tree tests/
    tests/
        +--- Makefile
        +--- blkcipher_seq.c
        +--- blob_example.c
        +--- capwap.c
        +--- deco_dma_1.c
        ...

The provided Makefile contains the necessary include paths and compiler flags
to build all examples without installing the library on your machine:

    $ cd tests
    $ make all
or

    $ make <test_name>

To build the tests for the target machine, you must set the CROSS_COMPILE
variable to your toolchain compiler before building:

    $ export CROSS_COMPILE=powerpc-fsl-linux-
    $ make all


Supported hardware platforms
----------------------------
The current version of RTA supports SEC versions 4.X.


Known limitations
-----------------
The code is checked against the complete table of SEC features.
There is no verification of code against SEC features that are not available
on a certain SEC subversion.
